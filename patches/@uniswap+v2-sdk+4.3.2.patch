diff --git a/node_modules/@uniswap/v2-sdk/dist/constants.d.ts b/node_modules/@uniswap/v2-sdk/dist/constants.d.ts
index 806a13f..9e5d8c1 100644
--- a/node_modules/@uniswap/v2-sdk/dist/constants.d.ts
+++ b/node_modules/@uniswap/v2-sdk/dist/constants.d.ts
@@ -7,7 +7,9 @@ export declare const FACTORY_ADDRESS = "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA
 export declare const FACTORY_ADDRESS_MAP: {
     [chainId: number]: string;
 };
-export declare const INIT_CODE_HASH = "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f";
+export declare const MAINNET_INIT_CODE_HASH = "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f";
+export declare const ABSTRACT_INIT_CODE_HASH = "0x0100052734c4d75c5acbdc1a3a934476b46a054330ef6ea080b0f3241ef3f4c1";
+export declare const INIT_CODE_HASH = "0x0100052734c4d75c5acbdc1a3a934476b46a054330ef6ea080b0f3241ef3f4c1";
 export declare const MINIMUM_LIQUIDITY: JSBI;
 export declare const ZERO: JSBI;
 export declare const ONE: JSBI;
diff --git a/node_modules/@uniswap/v2-sdk/dist/entities/pair.d.ts b/node_modules/@uniswap/v2-sdk/dist/entities/pair.d.ts
index 027686b..68299e5 100644
--- a/node_modules/@uniswap/v2-sdk/dist/entities/pair.d.ts
+++ b/node_modules/@uniswap/v2-sdk/dist/entities/pair.d.ts
@@ -1,8 +1,9 @@
-import { BigintIsh, CurrencyAmount, Price, Token } from '@uniswap/sdk-core';
-export declare const computePairAddress: ({ factoryAddress, tokenA, tokenB, }: {
+import { BigintIsh, ChainId, CurrencyAmount, Price, Token } from '@uniswap/sdk-core';
+export declare const computePairAddress: ({ factoryAddress, tokenA, tokenB, chainId, }: {
     factoryAddress: string;
     tokenA: Token;
     tokenB: Token;
+    chainId?: ChainId | undefined;
 }) => string;
 export declare class Pair {
     readonly liquidityToken: Token;
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js
index 012ecd1..950a6cc 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js
@@ -16,7 +16,9 @@ var invariant = _interopDefault(require('tiny-invariant'));
  */
 var FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
 var FACTORY_ADDRESS_MAP = sdkCore.V2_FACTORY_ADDRESSES;
-var INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f';
+var ABSTRACT_INIT_CODE_HASH = '0x0100052734c4d75c5acbdc1a3a934476b46a054330ef6ea080b0f3241ef3f4c1';
+// TODO: implement dynamic function
+var INIT_CODE_HASH = ABSTRACT_INIT_CODE_HASH;
 var MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000);
 // exports for internal consumption
 var ZERO = /*#__PURE__*/JSBI.BigInt(0);
@@ -201,11 +203,20 @@ var InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {
 var computePairAddress = function computePairAddress(_ref) {
   var factoryAddress = _ref.factoryAddress,
     tokenA = _ref.tokenA,
-    tokenB = _ref.tokenB;
+    tokenB = _ref.tokenB,
+    chainId = _ref.chainId;
   var _ref2 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],
     token0 = _ref2[0],
     token1 = _ref2[1]; // does safety checks
-  return address.getCreate2Address(factoryAddress, solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH);
+  var salt = solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [token0.address, token1.address])]);
+  switch (chainId) {
+    case sdkCore.ChainId.ZKSYNC:
+    case sdkCore.ChainId.ABSTRACT_TESTNET:
+      return sdkCore.computeZksyncCreate2Address(factoryAddress, INIT_CODE_HASH, salt);
+    default:
+      return address.getCreate2Address(factoryAddress, salt, INIT_CODE_HASH);
+  }
+  // return 
 };
 var Pair = /*#__PURE__*/function () {
   function Pair(currencyAmountA, tokenAmountB) {
@@ -220,7 +231,8 @@ var Pair = /*#__PURE__*/function () {
     return computePairAddress({
       factoryAddress: factoryAddress,
       tokenA: tokenA,
-      tokenB: tokenB
+      tokenB: tokenB,
+      chainId: tokenA == null ? void 0 : tokenA.chainId
     });
   }
   /**
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js.map b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js.map
index fbb3a6b..be9e7b0 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js.map
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { Percent, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * @deprecated use FACTORY_ADDRESS_MAP instead\n */\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const FACTORY_ADDRESS_MAP: { [chainId: number]: string } = V2_FACTORY_ADDRESSES\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { BigintIsh, CurrencyAmount, Percent, Price, sqrt, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport {\n  _1000,\n  _997,\n  BASIS_POINTS,\n  FACTORY_ADDRESS,\n  FACTORY_ADDRESS_MAP,\n  FIVE,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ONE_HUNDRED_PERCENT,\n  ZERO,\n  ZERO_PERCENT,\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const factoryAddress = FACTORY_ADDRESS_MAP[tokenA.chainId] ?? FACTORY_ADDRESS\n    return computePairAddress({ factoryAddress, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   * @param calculateFotFees\n   */\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)),\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n        )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n        )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType,\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","FACTORY_ADDRESS_MAP","V2_FACTORY_ADDRESSES","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","_ref2","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","_FACTORY_ADDRESS_MAP$","_proto","involvesToken","token","equals","priceOf","process","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","inputAmountBeforeTax","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","wrapped","sellFeeBps","gt","BigNumber","from","buyFeeBps","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","value","i","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { Percent, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * @deprecated use FACTORY_ADDRESS_MAP instead\n */\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const FACTORY_ADDRESS_MAP: { [chainId: number]: string } = V2_FACTORY_ADDRESSES\n\nexport const MAINNET_INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\nexport const ABSTRACT_INIT_CODE_HASH = '0x0100052734c4d75c5acbdc1a3a934476b46a054330ef6ea080b0f3241ef3f4c1'\n\n// TODO: implement dynamic function\nexport const INIT_CODE_HASH = ABSTRACT_INIT_CODE_HASH\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { BigintIsh, ChainId, computeZksyncCreate2Address, CurrencyAmount, Percent, Price, sqrt, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport {\n  _1000,\n  _997,\n  BASIS_POINTS,\n  FACTORY_ADDRESS,\n  FACTORY_ADDRESS_MAP,\n  FIVE,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ONE_HUNDRED_PERCENT,\n  ZERO,\n  ZERO_PERCENT,\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  chainId,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  chainId?: ChainId\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n  const salt = keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])])\n\n  switch (chainId) {\n    case ChainId.ZKSYNC:\n    case ChainId.ABSTRACT_TESTNET:\n      return computeZksyncCreate2Address(factoryAddress, INIT_CODE_HASH, salt)\n    default:\n      return getCreate2Address(\n        factoryAddress,\n        salt,\n        INIT_CODE_HASH\n      )\n  }\n\n  // return \n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const factoryAddress = FACTORY_ADDRESS_MAP[tokenA.chainId] ?? FACTORY_ADDRESS\n    return computePairAddress({ factoryAddress, tokenA, tokenB, chainId: tokenA?.chainId })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   * @param calculateFotFees\n   */\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        inputAmount.currency,\n        percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n      )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        outputAmount.currency,\n        outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n      )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)),\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        outputAmount.currency,\n        JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n      )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        inputAmount.currency,\n        JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n      )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType,\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","FACTORY_ADDRESS_MAP","V2_FACTORY_ADDRESSES","ABSTRACT_INIT_CODE_HASH","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","chainId","_ref2","sortsBefore","token0","token1","salt","keccak256","pack","address","ChainId","ZKSYNC","ABSTRACT_TESTNET","computeZksyncCreate2Address","getCreate2Address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","getAddress","_FACTORY_ADDRESS_MAP$","_proto","involvesToken","token","equals","priceOf","process","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","inputAmountBeforeTax","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","wrapped","sellFeeBps","gt","BigNumber","from","buyFeeBps","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","value","i","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js
index 7b03c55..bf9b51d 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t.default:t}Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@uniswap/sdk-core"),r=t(require("jsbi")),n=require("@ethersproject/address"),o=require("@ethersproject/bignumber"),u=require("@ethersproject/solidity"),i=t(require("tiny-invariant")),s=e.V2_FACTORY_ADDRESSES,a="0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",c=r.BigInt(1e3),p=r.BigInt(0),l=r.BigInt(1),m=r.BigInt(5),f=r.BigInt(997),h=r.BigInt(1e3),d=r.BigInt(1e4),y=new e.Percent(p),v=new e.Percent(l);function A(t,e,r){if(T())return Reflect.construct.apply(null,arguments);var n=[null];n.push.apply(n,e);var o=new(t.bind.apply(t,n));return r&&I(o,r.prototype),o}function T(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(T=function(){return!!t})()}function q(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}function k(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,q(n.key),n)}}function w(t,e,r){return e&&k(t.prototype,e),r&&k(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function g(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,I(t,e)}function b(t){return(b=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function I(t,e){return(I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function O(t){var e="function"==typeof Map?new Map:void 0;return(O=function(t){if(null===t||!function(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}catch(e){return"function"==typeof t}}(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return A(t,arguments,b(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),I(r,t)})(t)}function P(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function x(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function E(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(r)return(r=r.call(t)).next.bind(r);if(Array.isArray(t)||(r=function(t,e){if(t){if("string"==typeof t)return x(t,void 0);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?x(t,void 0):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0;return function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var C="setPrototypeOf"in Object,F=function(t){function e(){var r;return(r=t.call(this)||this).isInsufficientReservesError=!0,r.name=r.constructor.name,C&&Object.setPrototypeOf(P(r),(this instanceof e?this.constructor:void 0).prototype),r}return g(e,t),e}(O(Error)),B=function(t){function e(){var r;return(r=t.call(this)||this).isInsufficientInputAmountError=!0,r.name=r.constructor.name,C&&Object.setPrototypeOf(P(r),(this instanceof e?this.constructor:void 0).prototype),r}return g(e,t),e}(O(Error)),_=function(t){var e=t.factoryAddress,r=t.tokenA,o=t.tokenB,i=r.sortsBefore(o)?[r,o]:[o,r];return n.getCreate2Address(e,u.keccak256(["bytes"],[u.pack(["address","address"],[i[0].address,i[1].address])]),a)},R=function(){function t(r,n){var o=r.currency.sortsBefore(n.currency)?[r,n]:[n,r];this.liquidityToken=new e.Token(o[0].currency.chainId,t.getAddress(o[0].currency,o[1].currency),18,"UNI-V2","Uniswap V2"),this.tokenAmounts=o}t.getAddress=function(t,e){var r,n=null!=(r=s[t.chainId])?r:"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f";return _({factoryAddress:n,tokenA:t,tokenB:e})};var n=t.prototype;return n.involvesToken=function(t){return t.equals(this.token0)||t.equals(this.token1)},n.priceOf=function(t){return this.involvesToken(t)||i(!1),t.equals(this.token0)?this.token0Price:this.token1Price},n.reserveOf=function(t){return this.involvesToken(t)||i(!1),t.equals(this.token0)?this.reserve0:this.reserve1},n.getOutputAmount=function(n,o){if(void 0===o&&(o=!0),this.involvesToken(n.currency)||i(!1),r.equal(this.reserve0.quotient,p)||r.equal(this.reserve1.quotient,p))throw new F;var u=this.reserveOf(n.currency),s=this.reserveOf(n.currency.equals(this.token0)?this.token1:this.token0),a=o?this.derivePercentAfterSellFees(n):y,c=a.greaterThan(y)?e.CurrencyAmount.fromRawAmount(n.currency,a.multiply(n).quotient):n,l=r.multiply(c.quotient,f),m=r.multiply(l,s.quotient),d=r.add(r.multiply(u.quotient,h),l),v=e.CurrencyAmount.fromRawAmount(n.currency.equals(this.token0)?this.token1:this.token0,r.divide(m,d));if(r.equal(v.quotient,p))throw new B;var A=o?this.derivePercentAfterBuyFees(v):y,T=A.greaterThan(y)?e.CurrencyAmount.fromRawAmount(v.currency,v.multiply(A).quotient):v;if(r.equal(T.quotient,p))throw new B;return[T,new t(u.add(c),s.subtract(T))]},n.getInputAmount=function(n,o){void 0===o&&(o=!0),this.involvesToken(n.currency)||i(!1);var u=o?this.derivePercentAfterBuyFees(n):y,s=u.greaterThan(y)?e.CurrencyAmount.fromRawAmount(n.currency,r.add(n.divide(u).quotient,l)):n;if(r.equal(this.reserve0.quotient,p)||r.equal(this.reserve1.quotient,p)||r.greaterThanOrEqual(n.quotient,this.reserveOf(n.currency).quotient)||r.greaterThanOrEqual(s.quotient,this.reserveOf(n.currency).quotient))throw new F;var a=this.reserveOf(n.currency),c=this.reserveOf(n.currency.equals(this.token0)?this.token1:this.token0),m=r.multiply(r.multiply(c.quotient,s.quotient),h),d=r.multiply(r.subtract(a.quotient,s.quotient),f),v=e.CurrencyAmount.fromRawAmount(n.currency.equals(this.token0)?this.token1:this.token0,r.add(r.divide(m,d),l)),A=o?this.derivePercentAfterSellFees(v):y;return[A.greaterThan(y)?e.CurrencyAmount.fromRawAmount(v.currency,r.add(v.divide(A).quotient,l)):v,new t(c.add(v),a.subtract(n))]},n.getLiquidityMinted=function(t,n,o){t.currency.equals(this.liquidityToken)||i(!1);var u,s=n.currency.sortsBefore(o.currency)?[n,o]:[o,n];if(s[0].currency.equals(this.token0)&&s[1].currency.equals(this.token1)||i(!1),r.equal(t.quotient,p))u=r.subtract(e.sqrt(r.multiply(s[0].quotient,s[1].quotient)),c);else{var a=r.divide(r.multiply(s[0].quotient,t.quotient),this.reserve0.quotient),l=r.divide(r.multiply(s[1].quotient,t.quotient),this.reserve1.quotient);u=r.lessThanOrEqual(a,l)?a:l}if(!r.greaterThan(u,p))throw new B;return e.CurrencyAmount.fromRawAmount(this.liquidityToken,u)},n.getLiquidityValue=function(t,n,o,u,s){var a;if(void 0===u&&(u=!1),this.involvesToken(t)||i(!1),n.currency.equals(this.liquidityToken)||i(!1),o.currency.equals(this.liquidityToken)||i(!1),r.lessThanOrEqual(o.quotient,n.quotient)||i(!1),u){s||i(!1);var c=r.BigInt(s);if(r.equal(c,p))a=n;else{var l=e.sqrt(r.multiply(this.reserve0.quotient,this.reserve1.quotient)),f=e.sqrt(c);if(r.greaterThan(l,f)){var h=r.multiply(n.quotient,r.subtract(l,f)),d=r.add(r.multiply(l,m),f),y=r.divide(h,d);a=n.add(e.CurrencyAmount.fromRawAmount(this.liquidityToken,y))}else a=n}}else a=n;return e.CurrencyAmount.fromRawAmount(t,r.divide(r.multiply(o.quotient,this.reserveOf(t).quotient),a.quotient))},n.derivePercentAfterSellFees=function(t){var n=this.token0.wrapped.equals(t.wrapped.currency)?this.token0.wrapped.sellFeeBps:this.token1.wrapped.sellFeeBps;return null!=n&&n.gt(o.BigNumber.from(0))?v.subtract(new e.Percent(r.BigInt(n)).divide(d)):y},n.derivePercentAfterBuyFees=function(t){var n=this.token0.wrapped.equals(t.wrapped.currency)?this.token0.wrapped.buyFeeBps:this.token1.wrapped.buyFeeBps;return null!=n&&n.gt(o.BigNumber.from(0))?v.subtract(new e.Percent(r.BigInt(n)).divide(d)):y},w(t,[{key:"token0Price",get:function(){var t=this.tokenAmounts[1].divide(this.tokenAmounts[0]);return new e.Price(this.token0,this.token1,t.denominator,t.numerator)}},{key:"token1Price",get:function(){var t=this.tokenAmounts[0].divide(this.tokenAmounts[1]);return new e.Price(this.token1,this.token0,t.denominator,t.numerator)}},{key:"chainId",get:function(){return this.token0.chainId}},{key:"token0",get:function(){return this.tokenAmounts[0].currency}},{key:"token1",get:function(){return this.tokenAmounts[1].currency}},{key:"reserve0",get:function(){return this.tokenAmounts[0]}},{key:"reserve1",get:function(){return this.tokenAmounts[1]}}]),t}(),S=function(){function t(t,e,r){this._midPrice=null,t.length>0||i(!1);var n=t[0].chainId;t.every((function(t){return t.chainId===n}))||i(!1);var o=e.wrapped;t[0].involvesToken(o)||i(!1),void 0===r||t[t.length-1].involvesToken(r.wrapped)||i(!1);for(var u,s=[o],a=E(t.entries());!(u=a()).done;){var c=u.value,p=c[1],l=s[c[0]];l.equals(p.token0)||l.equals(p.token1)||i(!1);var m=l.equals(p.token0)?p.token1:p.token0;s.push(m)}this.pairs=t,this.path=s,this.input=e,this.output=r}return w(t,[{key:"midPrice",get:function(){if(null!==this._midPrice)return this._midPrice;for(var t,r=[],n=E(this.pairs.entries());!(t=n()).done;){var o=t.value,u=o[1];r.push(this.path[o[0]].equals(u.token0)?new e.Price(u.reserve0.currency,u.reserve1.currency,u.reserve0.quotient,u.reserve1.quotient):new e.Price(u.reserve1.currency,u.reserve0.currency,u.reserve1.quotient,u.reserve0.quotient))}var i=r.slice(1).reduce((function(t,e){return t.multiply(e)}),r[0]);return this._midPrice=new e.Price(this.input,this.output,i.denominator,i.numerator)}},{key:"chainId",get:function(){return this.pairs[0].chainId}}]),t}();function j(t,e){return t.inputAmount.currency.equals(e.inputAmount.currency)||i(!1),t.outputAmount.currency.equals(e.outputAmount.currency)||i(!1),t.outputAmount.equalTo(e.outputAmount)?t.inputAmount.equalTo(e.inputAmount)?0:t.inputAmount.lessThan(e.inputAmount)?-1:1:t.outputAmount.lessThan(e.outputAmount)?1:-1}function U(t,e){var r=j(t,e);return 0!==r?r:t.priceImpact.lessThan(e.priceImpact)?-1:t.priceImpact.greaterThan(e.priceImpact)?1:t.route.path.length-e.route.path.length}var N=function(){function t(t,r,n){this.route=t,this.tradeType=n;var o=new Array(t.path.length);if(n===e.TradeType.EXACT_INPUT){r.currency.equals(t.input)||i(!1),o[0]=r.wrapped;for(var u=0;u<t.path.length-1;u++){var s=t.pairs[u].getOutputAmount(o[u]);o[u+1]=s[0]}this.inputAmount=e.CurrencyAmount.fromFractionalAmount(t.input,r.numerator,r.denominator),this.outputAmount=e.CurrencyAmount.fromFractionalAmount(t.output,o[o.length-1].numerator,o[o.length-1].denominator)}else{r.currency.equals(t.output)||i(!1),o[o.length-1]=r.wrapped;for(var a=t.path.length-1;a>0;a--){var c=t.pairs[a-1].getInputAmount(o[a]);o[a-1]=c[0]}this.inputAmount=e.CurrencyAmount.fromFractionalAmount(t.input,o[0].numerator,o[0].denominator),this.outputAmount=e.CurrencyAmount.fromFractionalAmount(t.output,r.numerator,r.denominator)}this.executionPrice=new e.Price(this.inputAmount.currency,this.outputAmount.currency,this.inputAmount.quotient,this.outputAmount.quotient),this.priceImpact=e.computePriceImpact(t.midPrice,this.inputAmount,this.outputAmount)}t.exactIn=function(r,n){return new t(r,n,e.TradeType.EXACT_INPUT)},t.exactOut=function(r,n){return new t(r,n,e.TradeType.EXACT_OUTPUT)};var r=t.prototype;return r.minimumAmountOut=function(t){if(t.lessThan(p)&&i(!1),this.tradeType===e.TradeType.EXACT_OUTPUT)return this.outputAmount;var r=new e.Fraction(l).add(t).invert().multiply(this.outputAmount.quotient).quotient;return e.CurrencyAmount.fromRawAmount(this.outputAmount.currency,r)},r.maximumAmountIn=function(t){if(t.lessThan(p)&&i(!1),this.tradeType===e.TradeType.EXACT_INPUT)return this.inputAmount;var r=new e.Fraction(l).add(t).multiply(this.inputAmount.quotient).quotient;return e.CurrencyAmount.fromRawAmount(this.inputAmount.currency,r)},t.bestTradeExactIn=function(r,n,o,u,s,a,c){var l=void 0===u?{}:u,m=l.maxNumResults,f=void 0===m?3:m,h=l.maxHops,d=void 0===h?3:h;void 0===s&&(s=[]),void 0===a&&(a=n),void 0===c&&(c=[]),r.length>0||i(!1),d>0||i(!1),n===a||s.length>0||i(!1);for(var y=a.wrapped,v=o.wrapped,A=0;A<r.length;A++){var T=r[A];if((T.token0.equals(y.currency)||T.token1.equals(y.currency))&&!T.reserve0.equalTo(p)&&!T.reserve1.equalTo(p)){var q=void 0;try{q=T.getOutputAmount(y)[0]}catch(t){if(t.isInsufficientInputAmountError)continue;throw t}if(q.currency.equals(v))e.sortedInsert(c,new t(new S([].concat(s,[T]),n.currency,o),n,e.TradeType.EXACT_INPUT),f,U);else if(d>1&&r.length>1){var k=r.slice(0,A).concat(r.slice(A+1,r.length));t.bestTradeExactIn(k,n,o,{maxNumResults:f,maxHops:d-1},[].concat(s,[T]),q,c)}}}return c},r.worstExecutionPrice=function(t){return new e.Price(this.inputAmount.currency,this.outputAmount.currency,this.maximumAmountIn(t).quotient,this.minimumAmountOut(t).quotient)},t.bestTradeExactOut=function(r,n,o,u,s,a,c){var l=void 0===u?{}:u,m=l.maxNumResults,f=void 0===m?3:m,h=l.maxHops,d=void 0===h?3:h;void 0===s&&(s=[]),void 0===a&&(a=o),void 0===c&&(c=[]),r.length>0||i(!1),d>0||i(!1),o===a||s.length>0||i(!1);for(var y=a.wrapped,v=n.wrapped,A=0;A<r.length;A++){var T=r[A];if((T.token0.equals(y.currency)||T.token1.equals(y.currency))&&!T.reserve0.equalTo(p)&&!T.reserve1.equalTo(p)){var q=void 0;try{q=T.getInputAmount(y)[0]}catch(t){if(t.isInsufficientReservesError)continue;throw t}if(q.currency.equals(v))e.sortedInsert(c,new t(new S([T].concat(s),n,o.currency),o,e.TradeType.EXACT_OUTPUT),f,U);else if(d>1&&r.length>1){var k=r.slice(0,A).concat(r.slice(A+1,r.length));t.bestTradeExactOut(k,n,o,{maxNumResults:f,maxHops:d-1},[T].concat(s),q,c)}}}return c},t}();function H(t){return"0x"+t.quotient.toString(16)}var M=function(){function t(){}return t.swapCallParameters=function(t,r){var n=t.inputAmount.currency.isNative,o=t.outputAmount.currency.isNative;n&&o&&i(!1),!("ttl"in r)||r.ttl>0||i(!1);var u,s,a,c=e.validateAndParseAddress(r.recipient),p=H(t.maximumAmountIn(r.allowedSlippage)),l=H(t.minimumAmountOut(r.allowedSlippage)),m=t.route.path.map((function(t){return t.address})),f="ttl"in r?"0x"+(Math.floor((new Date).getTime()/1e3)+r.ttl).toString(16):"0x"+r.deadline.toString(16),h=Boolean(r.feeOnTransfer);switch(t.tradeType){case e.TradeType.EXACT_INPUT:n?(u=h?"swapExactETHForTokensSupportingFeeOnTransferTokens":"swapExactETHForTokens",s=[l,m,c,f],a=p):o?(u=h?"swapExactTokensForETHSupportingFeeOnTransferTokens":"swapExactTokensForETH",s=[p,l,m,c,f],a="0x0"):(u=h?"swapExactTokensForTokensSupportingFeeOnTransferTokens":"swapExactTokensForTokens",s=[p,l,m,c,f],a="0x0");break;case e.TradeType.EXACT_OUTPUT:h&&i(!1),n?(u="swapETHForExactTokens",s=[l,m,c,f],a=p):o?(u="swapTokensForExactETH",s=[l,p,m,c,f],a="0x0"):(u="swapTokensForExactTokens",s=[l,p,m,c,f],a="0x0")}return{methodName:u,args:s,value:a}},t}();exports.FACTORY_ADDRESS_MAP=s,exports.INIT_CODE_HASH=a,exports.InsufficientInputAmountError=B,exports.InsufficientReservesError=F,exports.MINIMUM_LIQUIDITY=c,exports.Pair=R,exports.Route=S,exports.Router=M,exports.Trade=N,exports.computePairAddress=_,exports.inputOutputComparator=j,exports.tradeComparator=U;
+"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t.default:t}Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@uniswap/sdk-core"),r=t(require("jsbi")),n=require("@ethersproject/address"),o=require("@ethersproject/bignumber"),u=require("@ethersproject/solidity"),i=t(require("tiny-invariant")),a=e.V2_FACTORY_ADDRESSES,s="0x0100052734c4d75c5acbdc1a3a934476b46a054330ef6ea080b0f3241ef3f4c1",c=r.BigInt(1e3),p=r.BigInt(0),l=r.BigInt(1),d=r.BigInt(5),m=r.BigInt(997),h=r.BigInt(1e3),f=r.BigInt(1e4),y=new e.Percent(p),v=new e.Percent(l);function A(t,e,r){if(T())return Reflect.construct.apply(null,arguments);var n=[null];n.push.apply(n,e);var o=new(t.bind.apply(t,n));return r&&I(o,r.prototype),o}function T(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(T=function(){return!!t})()}function q(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}function k(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,q(n.key),n)}}function w(t,e,r){return e&&k(t.prototype,e),r&&k(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function g(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,I(t,e)}function b(t){return(b=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function I(t,e){return(I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function O(t){var e="function"==typeof Map?new Map:void 0;return(O=function(t){if(null===t||!function(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}catch(e){return"function"==typeof t}}(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return A(t,arguments,b(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),I(r,t)})(t)}function P(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function x(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function E(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(r)return(r=r.call(t)).next.bind(r);if(Array.isArray(t)||(r=function(t,e){if(t){if("string"==typeof t)return x(t,void 0);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?x(t,void 0):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0;return function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var C="setPrototypeOf"in Object,B=function(t){function e(){var r;return(r=t.call(this)||this).isInsufficientReservesError=!0,r.name=r.constructor.name,C&&Object.setPrototypeOf(P(r),(this instanceof e?this.constructor:void 0).prototype),r}return g(e,t),e}(O(Error)),F=function(t){function e(){var r;return(r=t.call(this)||this).isInsufficientInputAmountError=!0,r.name=r.constructor.name,C&&Object.setPrototypeOf(P(r),(this instanceof e?this.constructor:void 0).prototype),r}return g(e,t),e}(O(Error)),_=function(t){var r=t.factoryAddress,o=t.tokenA,i=t.tokenB,a=t.chainId,c=o.sortsBefore(i)?[o,i]:[i,o],p=u.keccak256(["bytes"],[u.pack(["address","address"],[c[0].address,c[1].address])]);switch(a){case e.ChainId.ZKSYNC:case e.ChainId.ABSTRACT_TESTNET:return e.computeZksyncCreate2Address(r,s,p);default:return n.getCreate2Address(r,p,s)}},S=function(){function t(r,n){var o=r.currency.sortsBefore(n.currency)?[r,n]:[n,r];this.liquidityToken=new e.Token(o[0].currency.chainId,t.getAddress(o[0].currency,o[1].currency),18,"UNI-V2","Uniswap V2"),this.tokenAmounts=o}t.getAddress=function(t,e){var r,n=null!=(r=a[t.chainId])?r:"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f";return _({factoryAddress:n,tokenA:t,tokenB:e,chainId:null==t?void 0:t.chainId})};var n=t.prototype;return n.involvesToken=function(t){return t.equals(this.token0)||t.equals(this.token1)},n.priceOf=function(t){return this.involvesToken(t)||i(!1),t.equals(this.token0)?this.token0Price:this.token1Price},n.reserveOf=function(t){return this.involvesToken(t)||i(!1),t.equals(this.token0)?this.reserve0:this.reserve1},n.getOutputAmount=function(n,o){if(void 0===o&&(o=!0),this.involvesToken(n.currency)||i(!1),r.equal(this.reserve0.quotient,p)||r.equal(this.reserve1.quotient,p))throw new B;var u=this.reserveOf(n.currency),a=this.reserveOf(n.currency.equals(this.token0)?this.token1:this.token0),s=o?this.derivePercentAfterSellFees(n):y,c=s.greaterThan(y)?e.CurrencyAmount.fromRawAmount(n.currency,s.multiply(n).quotient):n,l=r.multiply(c.quotient,m),d=r.multiply(l,a.quotient),f=r.add(r.multiply(u.quotient,h),l),v=e.CurrencyAmount.fromRawAmount(n.currency.equals(this.token0)?this.token1:this.token0,r.divide(d,f));if(r.equal(v.quotient,p))throw new F;var A=o?this.derivePercentAfterBuyFees(v):y,T=A.greaterThan(y)?e.CurrencyAmount.fromRawAmount(v.currency,v.multiply(A).quotient):v;if(r.equal(T.quotient,p))throw new F;return[T,new t(u.add(c),a.subtract(T))]},n.getInputAmount=function(n,o){void 0===o&&(o=!0),this.involvesToken(n.currency)||i(!1);var u=o?this.derivePercentAfterBuyFees(n):y,a=u.greaterThan(y)?e.CurrencyAmount.fromRawAmount(n.currency,r.add(n.divide(u).quotient,l)):n;if(r.equal(this.reserve0.quotient,p)||r.equal(this.reserve1.quotient,p)||r.greaterThanOrEqual(n.quotient,this.reserveOf(n.currency).quotient)||r.greaterThanOrEqual(a.quotient,this.reserveOf(n.currency).quotient))throw new B;var s=this.reserveOf(n.currency),c=this.reserveOf(n.currency.equals(this.token0)?this.token1:this.token0),d=r.multiply(r.multiply(c.quotient,a.quotient),h),f=r.multiply(r.subtract(s.quotient,a.quotient),m),v=e.CurrencyAmount.fromRawAmount(n.currency.equals(this.token0)?this.token1:this.token0,r.add(r.divide(d,f),l)),A=o?this.derivePercentAfterSellFees(v):y;return[A.greaterThan(y)?e.CurrencyAmount.fromRawAmount(v.currency,r.add(v.divide(A).quotient,l)):v,new t(c.add(v),s.subtract(n))]},n.getLiquidityMinted=function(t,n,o){t.currency.equals(this.liquidityToken)||i(!1);var u,a=n.currency.sortsBefore(o.currency)?[n,o]:[o,n];if(a[0].currency.equals(this.token0)&&a[1].currency.equals(this.token1)||i(!1),r.equal(t.quotient,p))u=r.subtract(e.sqrt(r.multiply(a[0].quotient,a[1].quotient)),c);else{var s=r.divide(r.multiply(a[0].quotient,t.quotient),this.reserve0.quotient),l=r.divide(r.multiply(a[1].quotient,t.quotient),this.reserve1.quotient);u=r.lessThanOrEqual(s,l)?s:l}if(!r.greaterThan(u,p))throw new F;return e.CurrencyAmount.fromRawAmount(this.liquidityToken,u)},n.getLiquidityValue=function(t,n,o,u,a){var s;if(void 0===u&&(u=!1),this.involvesToken(t)||i(!1),n.currency.equals(this.liquidityToken)||i(!1),o.currency.equals(this.liquidityToken)||i(!1),r.lessThanOrEqual(o.quotient,n.quotient)||i(!1),u){a||i(!1);var c=r.BigInt(a);if(r.equal(c,p))s=n;else{var l=e.sqrt(r.multiply(this.reserve0.quotient,this.reserve1.quotient)),m=e.sqrt(c);if(r.greaterThan(l,m)){var h=r.multiply(n.quotient,r.subtract(l,m)),f=r.add(r.multiply(l,d),m),y=r.divide(h,f);s=n.add(e.CurrencyAmount.fromRawAmount(this.liquidityToken,y))}else s=n}}else s=n;return e.CurrencyAmount.fromRawAmount(t,r.divide(r.multiply(o.quotient,this.reserveOf(t).quotient),s.quotient))},n.derivePercentAfterSellFees=function(t){var n=this.token0.wrapped.equals(t.wrapped.currency)?this.token0.wrapped.sellFeeBps:this.token1.wrapped.sellFeeBps;return null!=n&&n.gt(o.BigNumber.from(0))?v.subtract(new e.Percent(r.BigInt(n)).divide(f)):y},n.derivePercentAfterBuyFees=function(t){var n=this.token0.wrapped.equals(t.wrapped.currency)?this.token0.wrapped.buyFeeBps:this.token1.wrapped.buyFeeBps;return null!=n&&n.gt(o.BigNumber.from(0))?v.subtract(new e.Percent(r.BigInt(n)).divide(f)):y},w(t,[{key:"token0Price",get:function(){var t=this.tokenAmounts[1].divide(this.tokenAmounts[0]);return new e.Price(this.token0,this.token1,t.denominator,t.numerator)}},{key:"token1Price",get:function(){var t=this.tokenAmounts[0].divide(this.tokenAmounts[1]);return new e.Price(this.token1,this.token0,t.denominator,t.numerator)}},{key:"chainId",get:function(){return this.token0.chainId}},{key:"token0",get:function(){return this.tokenAmounts[0].currency}},{key:"token1",get:function(){return this.tokenAmounts[1].currency}},{key:"reserve0",get:function(){return this.tokenAmounts[0]}},{key:"reserve1",get:function(){return this.tokenAmounts[1]}}]),t}(),R=function(){function t(t,e,r){this._midPrice=null,t.length>0||i(!1);var n=t[0].chainId;t.every((function(t){return t.chainId===n}))||i(!1);var o=e.wrapped;t[0].involvesToken(o)||i(!1),void 0===r||t[t.length-1].involvesToken(r.wrapped)||i(!1);for(var u,a=[o],s=E(t.entries());!(u=s()).done;){var c=u.value,p=c[1],l=a[c[0]];l.equals(p.token0)||l.equals(p.token1)||i(!1);var d=l.equals(p.token0)?p.token1:p.token0;a.push(d)}this.pairs=t,this.path=a,this.input=e,this.output=r}return w(t,[{key:"midPrice",get:function(){if(null!==this._midPrice)return this._midPrice;for(var t,r=[],n=E(this.pairs.entries());!(t=n()).done;){var o=t.value,u=o[1];r.push(this.path[o[0]].equals(u.token0)?new e.Price(u.reserve0.currency,u.reserve1.currency,u.reserve0.quotient,u.reserve1.quotient):new e.Price(u.reserve1.currency,u.reserve0.currency,u.reserve1.quotient,u.reserve0.quotient))}var i=r.slice(1).reduce((function(t,e){return t.multiply(e)}),r[0]);return this._midPrice=new e.Price(this.input,this.output,i.denominator,i.numerator)}},{key:"chainId",get:function(){return this.pairs[0].chainId}}]),t}();function j(t,e){return t.inputAmount.currency.equals(e.inputAmount.currency)||i(!1),t.outputAmount.currency.equals(e.outputAmount.currency)||i(!1),t.outputAmount.equalTo(e.outputAmount)?t.inputAmount.equalTo(e.inputAmount)?0:t.inputAmount.lessThan(e.inputAmount)?-1:1:t.outputAmount.lessThan(e.outputAmount)?1:-1}function N(t,e){var r=j(t,e);return 0!==r?r:t.priceImpact.lessThan(e.priceImpact)?-1:t.priceImpact.greaterThan(e.priceImpact)?1:t.route.path.length-e.route.path.length}var U=function(){function t(t,r,n){this.route=t,this.tradeType=n;var o=new Array(t.path.length);if(n===e.TradeType.EXACT_INPUT){r.currency.equals(t.input)||i(!1),o[0]=r.wrapped;for(var u=0;u<t.path.length-1;u++){var a=t.pairs[u].getOutputAmount(o[u]);o[u+1]=a[0]}this.inputAmount=e.CurrencyAmount.fromFractionalAmount(t.input,r.numerator,r.denominator),this.outputAmount=e.CurrencyAmount.fromFractionalAmount(t.output,o[o.length-1].numerator,o[o.length-1].denominator)}else{r.currency.equals(t.output)||i(!1),o[o.length-1]=r.wrapped;for(var s=t.path.length-1;s>0;s--){var c=t.pairs[s-1].getInputAmount(o[s]);o[s-1]=c[0]}this.inputAmount=e.CurrencyAmount.fromFractionalAmount(t.input,o[0].numerator,o[0].denominator),this.outputAmount=e.CurrencyAmount.fromFractionalAmount(t.output,r.numerator,r.denominator)}this.executionPrice=new e.Price(this.inputAmount.currency,this.outputAmount.currency,this.inputAmount.quotient,this.outputAmount.quotient),this.priceImpact=e.computePriceImpact(t.midPrice,this.inputAmount,this.outputAmount)}t.exactIn=function(r,n){return new t(r,n,e.TradeType.EXACT_INPUT)},t.exactOut=function(r,n){return new t(r,n,e.TradeType.EXACT_OUTPUT)};var r=t.prototype;return r.minimumAmountOut=function(t){if(t.lessThan(p)&&i(!1),this.tradeType===e.TradeType.EXACT_OUTPUT)return this.outputAmount;var r=new e.Fraction(l).add(t).invert().multiply(this.outputAmount.quotient).quotient;return e.CurrencyAmount.fromRawAmount(this.outputAmount.currency,r)},r.maximumAmountIn=function(t){if(t.lessThan(p)&&i(!1),this.tradeType===e.TradeType.EXACT_INPUT)return this.inputAmount;var r=new e.Fraction(l).add(t).multiply(this.inputAmount.quotient).quotient;return e.CurrencyAmount.fromRawAmount(this.inputAmount.currency,r)},t.bestTradeExactIn=function(r,n,o,u,a,s,c){var l=void 0===u?{}:u,d=l.maxNumResults,m=void 0===d?3:d,h=l.maxHops,f=void 0===h?3:h;void 0===a&&(a=[]),void 0===s&&(s=n),void 0===c&&(c=[]),r.length>0||i(!1),f>0||i(!1),n===s||a.length>0||i(!1);for(var y=s.wrapped,v=o.wrapped,A=0;A<r.length;A++){var T=r[A];if((T.token0.equals(y.currency)||T.token1.equals(y.currency))&&!T.reserve0.equalTo(p)&&!T.reserve1.equalTo(p)){var q=void 0;try{q=T.getOutputAmount(y)[0]}catch(t){if(t.isInsufficientInputAmountError)continue;throw t}if(q.currency.equals(v))e.sortedInsert(c,new t(new R([].concat(a,[T]),n.currency,o),n,e.TradeType.EXACT_INPUT),m,N);else if(f>1&&r.length>1){var k=r.slice(0,A).concat(r.slice(A+1,r.length));t.bestTradeExactIn(k,n,o,{maxNumResults:m,maxHops:f-1},[].concat(a,[T]),q,c)}}}return c},r.worstExecutionPrice=function(t){return new e.Price(this.inputAmount.currency,this.outputAmount.currency,this.maximumAmountIn(t).quotient,this.minimumAmountOut(t).quotient)},t.bestTradeExactOut=function(r,n,o,u,a,s,c){var l=void 0===u?{}:u,d=l.maxNumResults,m=void 0===d?3:d,h=l.maxHops,f=void 0===h?3:h;void 0===a&&(a=[]),void 0===s&&(s=o),void 0===c&&(c=[]),r.length>0||i(!1),f>0||i(!1),o===s||a.length>0||i(!1);for(var y=s.wrapped,v=n.wrapped,A=0;A<r.length;A++){var T=r[A];if((T.token0.equals(y.currency)||T.token1.equals(y.currency))&&!T.reserve0.equalTo(p)&&!T.reserve1.equalTo(p)){var q=void 0;try{q=T.getInputAmount(y)[0]}catch(t){if(t.isInsufficientReservesError)continue;throw t}if(q.currency.equals(v))e.sortedInsert(c,new t(new R([T].concat(a),n,o.currency),o,e.TradeType.EXACT_OUTPUT),m,N);else if(f>1&&r.length>1){var k=r.slice(0,A).concat(r.slice(A+1,r.length));t.bestTradeExactOut(k,n,o,{maxNumResults:m,maxHops:f-1},[T].concat(a),q,c)}}}return c},t}();function H(t){return"0x"+t.quotient.toString(16)}var M=function(){function t(){}return t.swapCallParameters=function(t,r){var n=t.inputAmount.currency.isNative,o=t.outputAmount.currency.isNative;n&&o&&i(!1),!("ttl"in r)||r.ttl>0||i(!1);var u,a,s,c=e.validateAndParseAddress(r.recipient),p=H(t.maximumAmountIn(r.allowedSlippage)),l=H(t.minimumAmountOut(r.allowedSlippage)),d=t.route.path.map((function(t){return t.address})),m="ttl"in r?"0x"+(Math.floor((new Date).getTime()/1e3)+r.ttl).toString(16):"0x"+r.deadline.toString(16),h=Boolean(r.feeOnTransfer);switch(t.tradeType){case e.TradeType.EXACT_INPUT:n?(u=h?"swapExactETHForTokensSupportingFeeOnTransferTokens":"swapExactETHForTokens",a=[l,d,c,m],s=p):o?(u=h?"swapExactTokensForETHSupportingFeeOnTransferTokens":"swapExactTokensForETH",a=[p,l,d,c,m],s="0x0"):(u=h?"swapExactTokensForTokensSupportingFeeOnTransferTokens":"swapExactTokensForTokens",a=[p,l,d,c,m],s="0x0");break;case e.TradeType.EXACT_OUTPUT:h&&i(!1),n?(u="swapETHForExactTokens",a=[l,d,c,m],s=p):o?(u="swapTokensForExactETH",a=[l,p,d,c,m],s="0x0"):(u="swapTokensForExactTokens",a=[l,p,d,c,m],s="0x0")}return{methodName:u,args:a,value:s}},t}();exports.FACTORY_ADDRESS_MAP=a,exports.INIT_CODE_HASH=s,exports.InsufficientInputAmountError=F,exports.InsufficientReservesError=B,exports.MINIMUM_LIQUIDITY=c,exports.Pair=S,exports.Route=R,exports.Router=M,exports.Trade=U,exports.computePairAddress=_,exports.inputOutputComparator=j,exports.tradeComparator=N;
 //# sourceMappingURL=v2-sdk.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js.map b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js.map
index d204218..97cbba2 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js.map
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { Percent, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * @deprecated use FACTORY_ADDRESS_MAP instead\n */\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const FACTORY_ADDRESS_MAP: { [chainId: number]: string } = V2_FACTORY_ADDRESSES\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { BigintIsh, CurrencyAmount, Percent, Price, sqrt, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport {\n  _1000,\n  _997,\n  BASIS_POINTS,\n  FACTORY_ADDRESS,\n  FACTORY_ADDRESS_MAP,\n  FIVE,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ONE_HUNDRED_PERCENT,\n  ZERO,\n  ZERO_PERCENT,\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const factoryAddress = FACTORY_ADDRESS_MAP[tokenA.chainId] ?? FACTORY_ADDRESS\n    return computePairAddress({ factoryAddress, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   * @param calculateFotFees\n   */\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)),\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n        )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n        )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType,\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS_MAP","V2_FACTORY_ADDRESSES","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","_ref2","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","this","liquidityToken","Token","chainId","getAddress","_FACTORY_ADDRESS_MAP$","_proto","involvesToken","token","equals","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","wrapped","sellFeeBps","gt","BigNumber","from","buyFeeBps","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","i","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","args","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"gVAQaA,EAAqDC,uBAErDC,EAAiB,qEAEjBC,EAAoBC,EAAKC,OAAO,KAGhCC,EAAOF,EAAKC,OAAO,GACnBE,EAAMH,EAAKC,OAAO,GAClBG,EAAOJ,EAAKC,OAAO,GACnBI,EAAOL,EAAKC,OAAO,KACnBK,EAAQN,EAAKC,OAAO,KACpBM,EAAeP,EAAKC,OAAO,KAE3BO,EAAe,IAAIC,UAAQP,GAC3BQ,EAAsB,IAAID,UAAQN,2qFCtB/C,IAAMQ,EAAoB,mBAAoBC,OAMjCC,WAA0BC,GAGrC,SAAAD,UAG0E,OAFxEE,EAAAD,EAAAE,+CAHkD,EAIlDD,EAAKE,KAAOF,EAAKG,YAAYD,KACzBN,GAAmBC,OAAOO,eAAcC,EAAAL,oBAAOF,OAAAK,oBAAWG,WAAUN,EACzE,OAPoCO,EAAAT,EAAAC,GAOpCD,GAAAU,EAP4CC,QAclCC,WAA6BC,GAGxC,SAAAD,UAG0E,OAFxEE,EAAAD,EAAAV,kDAHqD,EAIrDW,EAAKV,KAAOU,EAAKT,YAAYD,KACzBN,GAAmBC,OAAOO,eAAcC,EAAAO,oBAAOF,OAAAP,oBAAWG,WAAUM,EACzE,OAPuCL,EAAAG,EAAAC,GAOvCD,GAAAF,EAP+CC,QCErCI,EAAqB,SAAHC,OAC7BC,EAAcD,EAAdC,eACAC,EAAMF,EAANE,OACAC,EAAMH,EAANG,OAMAC,EAAyBF,EAAOG,YAAYF,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,GAClF,OAAOI,oBACLL,EACAM,YAAU,CAAC,SAAU,CAACC,OAAK,CAAC,UAAW,WAAY,CAHxCJ,KAGgDK,QAHxCL,KAGwDK,YAC3ExC,IAGSyC,aASX,SAAAA,EAAmBC,EAAwCC,GACzD,IAAMC,EAAeF,EAAgBG,SAAST,YAAYO,EAAaE,UACnE,CAACH,EAAiBC,GAClB,CAACA,EAAcD,GACnBI,KAAKC,eAAiB,IAAIC,QACxBJ,EAAa,GAAGC,SAASI,QACzBR,EAAKS,WAAWN,EAAa,GAAGC,SAAUD,EAAa,GAAGC,UAC1D,GACA,SACA,cAEFC,KAAKF,aAAeA,EACrBH,EAjBaS,WAAP,SAAkBjB,EAAeC,SAChCF,SAAcmB,EAAGrD,EAAoBmC,EAAOgB,UAAQE,EFtC/B,6CEuC3B,OAAOrB,EAAmB,CAAEE,eAAAA,EAAgBC,OAAAA,EAAQC,OAAAA,KAiBtD,IAAAkB,EAAAX,EAAAlB,UAsDC,OAtDD6B,EAIOC,cAAA,SAAcC,GACnB,OAAOA,EAAMC,OAAOT,KAAKU,SAAWF,EAAMC,OAAOT,KAAKW,SAmBxDL,EAIOM,QAAA,SAAQJ,GAEb,OADUR,KAAKO,cAAcC,IAA7BK,MACOL,EAAMC,OAAOT,KAAKU,QAAUV,KAAKc,YAAcd,KAAKe,aAG7DT,EAuBOU,UAAA,SAAUR,GAEf,OADUR,KAAKO,cAAcC,IAA7BK,MACOL,EAAMC,OAAOT,KAAKU,QAAUV,KAAKiB,SAAWjB,KAAKkB,UAG1DZ,EA4DOa,gBAAA,SACLC,EACAC,GAGA,YAHAA,IAAAA,GAA4B,GAElBrB,KAAKO,cAAca,EAAYrB,WAAzCc,MACIzD,EAAKkE,MAAMtB,KAAKiB,SAASM,SAAUjE,IAASF,EAAKkE,MAAMtB,KAAKkB,SAASK,SAAUjE,GACjF,MAAM,IAAIW,EAEZ,IAAMuD,EAAexB,KAAKgB,UAAUI,EAAYrB,UAC1C0B,EAAgBzB,KAAKgB,UAAUI,EAAYrB,SAASU,OAAOT,KAAKU,QAAUV,KAAKW,OAASX,KAAKU,QAE7FgB,EAAuBL,EAAmBrB,KAAK2B,2BAA2BP,GAAexD,EACzFgE,EAAsBF,EAAqBG,YAAYjE,GACzDkE,iBAAeC,cACbX,EAAYrB,SACZ2B,EAAqBM,SAASZ,GAAaG,UAE7CH,EAEEa,EAAgC7E,EAAK4E,SAASJ,EAAoBL,SAAU9D,GAC5EyE,EAAY9E,EAAK4E,SAASC,EAA+BR,EAAcF,UACvEY,EAAc/E,EAAKgF,IAAIhF,EAAK4E,SAASR,EAAaD,SAAU7D,GAAQuE,GACpEI,EAAeP,iBAAeC,cAClCX,EAAYrB,SAASU,OAAOT,KAAKU,QAAUV,KAAKW,OAASX,KAAKU,OAC9DtD,EAAKkF,OAAOJ,EAAWC,IAGzB,GAAI/E,EAAKkE,MAAMe,EAAad,SAAUjE,GACpC,MAAM,IAAIuB,EAGZ,IAAM0D,EAAsBlB,EAAmBrB,KAAKwC,0BAA0BH,GAAgBzE,EACxF6E,EAAuBF,EAAoBV,YAAYjE,GACzDkE,iBAAeC,cACbM,EAAatC,SACbsC,EAAaL,SAASO,GAAqBhB,UAE7Cc,EACJ,GAAIjF,EAAKkE,MAAMmB,EAAqBlB,SAAUjE,GAC5C,MAAM,IAAIuB,EAGZ,MAAO,CACL4D,EACA,IAAI9C,EAAK6B,EAAaY,IAAIR,GAAsBH,EAAciB,SAASD,MAI3EnC,EA0COqC,eAAA,SACLN,EACAhB,YAAAA,IAAAA,GAA4B,GAElBrB,KAAKO,cAAc8B,EAAatC,WAA1Cc,MACA,IAAM0B,EAAsBlB,EAAmBrB,KAAKwC,0BAA0BH,GAAgBzE,EACxFgF,EAAwBL,EAAoBV,YAAYjE,GAC1DkE,iBAAeC,cACbM,EAAatC,SACb3C,EAAKgF,IAAIC,EAAaC,OAAOC,GAAqBhB,SAAUhE,IAE9D8E,EAEJ,GACEjF,EAAKkE,MAAMtB,KAAKiB,SAASM,SAAUjE,IACnCF,EAAKkE,MAAMtB,KAAKkB,SAASK,SAAUjE,IACnCF,EAAKyF,mBAAmBR,EAAad,SAAUvB,KAAKgB,UAAUqB,EAAatC,UAAUwB,WACrFnE,EAAKyF,mBAAmBD,EAAsBrB,SAAUvB,KAAKgB,UAAUqB,EAAatC,UAAUwB,UAE9F,MAAM,IAAItD,EAGZ,IAAMwD,EAAgBzB,KAAKgB,UAAUqB,EAAatC,UAC5CyB,EAAexB,KAAKgB,UAAUqB,EAAatC,SAASU,OAAOT,KAAKU,QAAUV,KAAKW,OAASX,KAAKU,QAE7FwB,EAAY9E,EAAK4E,SAAS5E,EAAK4E,SAASR,EAAaD,SAAUqB,EAAsBrB,UAAW7D,GAChGyE,EAAc/E,EAAK4E,SAAS5E,EAAKsF,SAASjB,EAAcF,SAAUqB,EAAsBrB,UAAW9D,GACnG2D,EAAcU,iBAAeC,cACjCM,EAAatC,SAASU,OAAOT,KAAKU,QAAUV,KAAKW,OAASX,KAAKU,OAC/DtD,EAAKgF,IAAIhF,EAAKkF,OAAOJ,EAAWC,GAAc5E,IAG1CmE,EAAuBL,EAAmBrB,KAAK2B,2BAA2BP,GAAexD,EAO/F,MAAO,CANsB8D,EAAqBG,YAAYjE,GAC1DkE,iBAAeC,cACbX,EAAYrB,SACZ3C,EAAKgF,IAAIhB,EAAYkB,OAAOZ,GAAsBH,SAAUhE,IAE9D6D,EAC0B,IAAIzB,EAAK6B,EAAaY,IAAIhB,GAAcK,EAAciB,SAASL,MAC9F/B,EAEMwC,mBAAA,SACLC,EACAC,EACAnD,GAEUkD,EAAYhD,SAASU,OAAOT,KAAKC,iBAA3CY,MACA,IAKIoC,EALEnD,EAAekD,EAAajD,SAAST,YAAYO,EAAaE,UAChE,CAACiD,EAAcnD,GACf,CAACA,EAAcmD,GAInB,GAHUlD,EAAa,GAAGC,SAASU,OAAOT,KAAKU,SAAWZ,EAAa,GAAGC,SAASU,OAAOT,KAAKW,SAA/FE,MAGIzD,EAAKkE,MAAMyB,EAAYxB,SAAUjE,GACnC2F,EAAY7F,EAAKsF,SACfQ,OAAK9F,EAAK4E,SAASlC,EAAa,GAAGyB,SAAUzB,EAAa,GAAGyB,WAC7DpE,OAEG,CACL,IAAMgG,EAAU/F,EAAKkF,OAAOlF,EAAK4E,SAASlC,EAAa,GAAGyB,SAAUwB,EAAYxB,UAAWvB,KAAKiB,SAASM,UACnG6B,EAAUhG,EAAKkF,OAAOlF,EAAK4E,SAASlC,EAAa,GAAGyB,SAAUwB,EAAYxB,UAAWvB,KAAKkB,SAASK,UACzG0B,EAAY7F,EAAKiG,gBAAgBF,EAASC,GAAWD,EAAUC,EAEjE,IAAKhG,EAAKyE,YAAYoB,EAAW3F,GAC/B,MAAM,IAAIuB,EAEZ,OAAOiD,iBAAeC,cAAc/B,KAAKC,eAAgBgD,IAC1D3C,EAEMgD,kBAAA,SACL9C,EACAuC,EACAE,EACAM,EACAC,GAOA,IAAIC,EACJ,YATAF,IAAAA,GAAiB,GAGPvD,KAAKO,cAAcC,IAA7BK,MACUkC,EAAYhD,SAASU,OAAOT,KAAKC,iBAA3CY,MACUoC,EAAUlD,SAASU,OAAOT,KAAKC,iBAAzCY,MACUzD,EAAKiG,gBAAgBJ,EAAU1B,SAAUwB,EAAYxB,WAA/DV,MAGK0C,EAEE,CACOC,GAAZ3C,MACA,IAAM6C,EAActG,EAAKC,OAAOmG,GAChC,GAAKpG,EAAKkE,MAAMoC,EAAapG,GAY3BmG,EAAsBV,MAZY,CAClC,IAAMY,EAAQT,OAAK9F,EAAK4E,SAAShC,KAAKiB,SAASM,SAAUvB,KAAKkB,SAASK,WACjEqC,EAAYV,OAAKQ,GACvB,GAAItG,EAAKyE,YAAY8B,EAAOC,GAAY,CACtC,IAAM1B,EAAY9E,EAAK4E,SAASe,EAAYxB,SAAUnE,EAAKsF,SAASiB,EAAOC,IACrEzB,EAAc/E,EAAKgF,IAAIhF,EAAK4E,SAAS2B,EAAOnG,GAAOoG,GACnDC,EAAezG,EAAKkF,OAAOJ,EAAWC,GAC5CsB,EAAsBV,EAAYX,IAAIN,iBAAeC,cAAc/B,KAAKC,eAAgB4D,SAExFJ,EAAsBV,QAb1BU,EAAsBV,EAoBxB,OAAOjB,iBAAeC,cACpBvB,EACApD,EAAKkF,OAAOlF,EAAK4E,SAASiB,EAAU1B,SAAUvB,KAAKgB,UAAUR,GAAOe,UAAWkC,EAAoBlC,YAEtGjB,EAEOqB,2BAAA,SAA2BP,GACjC,IAAM0C,EAAc9D,KAAKU,OAAOqD,QAAQtD,OAAOW,EAAY2C,QAAQhE,UAC/DC,KAAKU,OAAOqD,QAAQC,WACpBhE,KAAKW,OAAOoD,QAAQC,WACxB,aAAIF,GAAAA,EAAaG,GAAGC,YAAUC,KAAK,IAC1BrG,EAAoB4E,SAAS,IAAI7E,UAAQT,EAAKC,OAAOyG,IAAcxB,OAAO3E,IAE1EC,GAEV0C,EAEOkC,0BAAA,SAA0BH,GAChC,IAAM+B,EAAYpE,KAAKU,OAAOqD,QAAQtD,OAAO4B,EAAa0B,QAAQhE,UAC9DC,KAAKU,OAAOqD,QAAQK,UACpBpE,KAAKW,OAAOoD,QAAQK,UACxB,aAAIA,GAAAA,EAAWH,GAAGC,YAAUC,KAAK,IACxBrG,EAAoB4E,SAAS,IAAI7E,UAAQT,EAAKC,OAAO+G,IAAY9B,OAAO3E,IAExEC,GAEVyG,EAAA1E,IAAA2E,kBAAAC,IA1UD,WACE,IAAMC,EAASxE,KAAKF,aAAa,GAAGwC,OAAOtC,KAAKF,aAAa,IAC7D,OAAO,IAAI2E,QAAMzE,KAAKU,OAAQV,KAAKW,OAAQ6D,EAAOrC,YAAaqC,EAAOtC,cAGxEoC,kBAAAC,IAGA,WACE,IAAMC,EAASxE,KAAKF,aAAa,GAAGwC,OAAOtC,KAAKF,aAAa,IAC7D,OAAO,IAAI2E,QAAMzE,KAAKW,OAAQX,KAAKU,OAAQ8D,EAAOrC,YAAaqC,EAAOtC,cACvEoC,cAAAC,IAcD,WACE,OAAOvE,KAAKU,OAAOP,WACpBmE,aAAAC,IAED,WACE,OAAOvE,KAAKF,aAAa,GAAGC,YAC7BuE,aAAAC,IAED,WACE,OAAOvE,KAAKF,aAAa,GAAGC,YAC7BuE,eAAAC,IAED,WACE,OAAOvE,KAAKF,aAAa,MAC1BwE,eAAAC,IAED,WACE,OAAOvE,KAAKF,aAAa,OAC1BH,KC/GU+E,aAMX,SAAAA,EAAmBC,EAAeC,EAAeC,GA0BzC7E,eAA2C,KAzBvC2E,EAAMG,OAAS,GAAzBjE,MACA,IAAMV,EAAkBwE,EAAM,GAAGxE,QAE/BwE,EAAMI,OAAM,SAACC,GAAI,OAAKA,EAAK7E,UAAYA,MADzCU,MAKA,IAAMoE,EAAeL,EAAMb,QACjBY,EAAM,GAAGpE,cAAc0E,IAAjCpE,WAC4B,IAAXgE,GAA0BF,EAAMA,EAAMG,OAAS,GAAGvE,cAAcsE,EAAOd,UAAxFlD,MAGA,IADA,IACuCqE,EADjCC,EAAgB,CAACF,GACvBG,EAAAC,EAAwBV,EAAMW,aAASJ,EAAAE,KAAAG,MAAE,CAAA,IAAAC,EAAAN,EAAAO,MAA1BT,EAAIQ,KACXE,EAAeP,EADVK,MAEDE,EAAajF,OAAOuE,EAAKtE,SAAWgF,EAAajF,OAAOuE,EAAKrE,SAAvEE,MACA,IAAMgE,EAASa,EAAajF,OAAOuE,EAAKtE,QAAUsE,EAAKrE,OAASqE,EAAKtE,OACrEyE,EAAKQ,KAAKd,GAGZ7E,KAAK2E,MAAQA,EACb3E,KAAKmF,KAAOA,EACZnF,KAAK4E,MAAQA,EACb5E,KAAK6E,OAASA,EAqBf,OApBAR,EAAAK,IAAAJ,eAAAC,IAID,WACE,GAAuB,OAAnBvE,KAAK4F,UAAoB,OAAO5F,KAAK4F,UAEzC,IADA,IAC4CC,EADtCC,EAAsC,GAC5CC,EAAAV,EAAwBrF,KAAK2E,MAAMW,aAASO,EAAAE,KAAAR,MAAE,CAAA,IAAAS,EAAAH,EAAAJ,MAA/BT,EAAIgB,KACjBF,EAAOH,KACL3F,KAAKmF,KAFIa,MAEIvF,OAAOuE,EAAKtE,QACrB,IAAI+D,QAAMO,EAAK/D,SAASlB,SAAUiF,EAAK9D,SAASnB,SAAUiF,EAAK/D,SAASM,SAAUyD,EAAK9D,SAASK,UAChG,IAAIkD,QAAMO,EAAK9D,SAASnB,SAAUiF,EAAK/D,SAASlB,SAAUiF,EAAK9D,SAASK,SAAUyD,EAAK/D,SAASM,WAGxG,IAAM0E,EAAUH,EAAOI,MAAM,GAAGC,QAAO,SAACC,EAAaC,GAAY,OAAKD,EAAYpE,SAASqE,KAAeP,EAAO,IACjH,OAAQ9F,KAAK4F,UAAY,IAAInB,QAAMzE,KAAK4E,MAAO5E,KAAK6E,OAAQoB,EAAQ9D,YAAa8D,EAAQ/D,cAC1FoC,cAAAC,IAED,WACE,OAAOvE,KAAK2E,MAAM,GAAGxE,YACtBuE,cC9Ba4B,EACdC,EACAC,GAKA,OAFUD,EAAEnF,YAAYrB,SAASU,OAAO+F,EAAEpF,YAAYrB,WAAtDc,MACU0F,EAAElE,aAAatC,SAASU,OAAO+F,EAAEnE,aAAatC,WAAxDc,MACI0F,EAAElE,aAAaoE,QAAQD,EAAEnE,cACvBkE,EAAEnF,YAAYqF,QAAQD,EAAEpF,aACnB,EAGLmF,EAAEnF,YAAYsF,SAASF,EAAEpF,cACnB,EAED,EAILmF,EAAElE,aAAaqE,SAASF,EAAEnE,cACrB,GAEC,WAMEsE,EACdJ,EACAC,GAEA,IAAMI,EAASN,EAAsBC,EAAGC,GACxC,OAAe,IAAXI,EACKA,EAILL,EAAEM,YAAYH,SAASF,EAAEK,cACnB,EACCN,EAAEM,YAAYhF,YAAY2E,EAAEK,aAC9B,EAIFN,EAAEO,MAAM3B,KAAKL,OAAS0B,EAAEM,MAAM3B,KAAKL,OAc5C,IAAaiC,aAkDX,SAAAA,EACED,EACAE,EACAC,GAEAjH,KAAK8G,MAAQA,EACb9G,KAAKiH,UAAYA,EAEjB,IAAMnH,EAAwC,IAAIoH,MAAMJ,EAAM3B,KAAKL,QACnE,GAAImC,IAAcE,YAAUC,YAAa,CAC7BJ,EAAOjH,SAASU,OAAOqG,EAAMlC,QAAvC/D,MACAf,EAAa,GAAKkH,EAAOjD,QACzB,IAAK,IAAIsD,EAAI,EAAGA,EAAIP,EAAM3B,KAAKL,OAAS,EAAGuC,IAAK,CAC9C,IACAC,EADaR,EAAMnC,MAAM0C,GACGlG,gBAAgBrB,EAAauH,IACzDvH,EAAauH,EAAI,GADEC,KAGrBtH,KAAKoB,YAAcU,iBAAeyF,qBAAqBT,EAAMlC,MAAOoC,EAAO9E,UAAW8E,EAAO7E,aAC7FnC,KAAKqC,aAAeP,iBAAeyF,qBACjCT,EAAMjC,OACN/E,EAAaA,EAAagF,OAAS,GAAG5C,UACtCpC,EAAaA,EAAagF,OAAS,GAAG3C,iBAEnC,CACK6E,EAAOjH,SAASU,OAAOqG,EAAMjC,SAAvChE,MACAf,EAAaA,EAAagF,OAAS,GAAKkC,EAAOjD,QAC/C,IAAK,IAAIsD,EAAIP,EAAM3B,KAAKL,OAAS,EAAGuC,EAAI,EAAGA,IAAK,CAC9C,IACAG,EADaV,EAAMnC,MAAM0C,EAAI,GACF1E,eAAe7C,EAAauH,IACvDvH,EAAauH,EAAI,GADCG,KAGpBxH,KAAKoB,YAAcU,iBAAeyF,qBAChCT,EAAMlC,MACN9E,EAAa,GAAGoC,UAChBpC,EAAa,GAAGqC,aAElBnC,KAAKqC,aAAeP,iBAAeyF,qBAAqBT,EAAMjC,OAAQmC,EAAO9E,UAAW8E,EAAO7E,aAEjGnC,KAAKyH,eAAiB,IAAIhD,QACxBzE,KAAKoB,YAAYrB,SACjBC,KAAKqC,aAAatC,SAClBC,KAAKoB,YAAYG,SACjBvB,KAAKqC,aAAad,UAEpBvB,KAAK6G,YAAca,qBAAmBZ,EAAMa,SAAU3H,KAAKoB,YAAapB,KAAKqC,cApE/E0E,EAKca,QAAP,SACLd,EACAe,GAEA,OAAO,IAAId,EAAMD,EAAOe,EAAUV,YAAUC,cAG9CL,EAKce,SAAP,SACLhB,EACAiB,GAEA,OAAO,IAAIhB,EAAMD,EAAOiB,EAAWZ,YAAUa,eAkD/C,IAAA1H,EAAAyG,EAAAtI,UA6MC,OA7MD6B,EAIO2H,iBAAA,SAAiBC,GAEtB,GADWA,EAAkBxB,SAASpJ,IAAtCuD,MACIb,KAAKiH,YAAcE,YAAUa,aAC/B,OAAOhI,KAAKqC,aAEZ,IAAM8F,EAA4B,IAAIC,WAAS7K,GAC5C6E,IAAI8F,GACJG,SACArG,SAAShC,KAAKqC,aAAad,UAAUA,SACxC,OAAOO,iBAAeC,cAAc/B,KAAKqC,aAAatC,SAAUoI,IAIpE7H,EAIOgI,gBAAA,SAAgBJ,GAErB,GADWA,EAAkBxB,SAASpJ,IAAtCuD,MACIb,KAAKiH,YAAcE,YAAUC,YAC/B,OAAOpH,KAAKoB,YAEZ,IAAMmH,EAA2B,IAAIH,WAAS7K,GAC3C6E,IAAI8F,GACJlG,SAAShC,KAAKoB,YAAYG,UAAUA,SACvC,OAAOO,iBAAeC,cAAc/B,KAAKoB,YAAYrB,SAAUwI,IAInExB,EAccyB,iBAAP,SACL7D,EACA8D,EACAC,EAAoBC,EAGpBC,EACAC,EACAC,oBAJuD,GAAEH,EAAAI,EAAA9J,EAAvD+J,cAAAA,WAAaD,EAAG,EAACA,EAAAE,EAAAhK,EAAEiK,QAAAA,WAAOD,EAAG,EAACA,WAEhCL,IAAAA,EAAuB,aACvBC,IAAAA,EAAyCJ,YACzCK,IAAAA,EAA8D,IAEpDnE,EAAMG,OAAS,GAAzBjE,MACUqI,EAAU,GAApBrI,MACU4H,IAAqBI,GAAgBD,EAAa9D,OAAS,GAArEjE,MAIA,IAFA,IAAMgH,EAAWgB,EAAa9E,QACxBoF,EAAWT,EAAY3E,QACpBsD,EAAI,EAAGA,EAAI1C,EAAMG,OAAQuC,IAAK,CACrC,IAAMrC,EAAOL,EAAM0C,GAEnB,IAAKrC,EAAKtE,OAAOD,OAAOoH,EAAS9H,WAAciF,EAAKrE,OAAOF,OAAOoH,EAAS9H,aACvEiF,EAAK/D,SAASwF,QAAQnJ,KAAS0H,EAAK9D,SAASuF,QAAQnJ,GAAzD,CAEA,IAAIyK,SACJ,IACIA,EAAa/C,EAAK7D,gBAAgB0G,MACpC,MAAOuB,GAEP,GAAKA,EAAcC,+BACjB,SAEF,MAAMD,EAGR,GAAIrB,EAAUhI,SAASU,OAAO0I,GAC5BG,eACER,EACA,IAAI/B,EACF,IAAIrC,KAAK6E,OAAKX,GAAc5D,IAAOyD,EAAiB1I,SAAU2I,GAC9DD,EACAtB,YAAUC,aAEZ4B,EACArC,QAEG,GAAIuC,EAAU,GAAKvE,EAAMG,OAAS,EAAG,CAC1C,IAAM0E,EAAyB7E,EAAMuB,MAAM,EAAGmB,GAAGkC,OAAO5E,EAAMuB,MAAMmB,EAAI,EAAG1C,EAAMG,SAGjFiC,EAAMyB,iBACJgB,EACAf,EACAC,EACA,CACEM,cAAAA,EACAE,QAASA,EAAU,MACpBK,OACGX,GAAc5D,IAClB+C,EACAe,KAKN,OAAOA,GAGTxI,EAIOmJ,oBAAA,SAAoBvB,GACzB,OAAO,IAAIzD,QACTzE,KAAKoB,YAAYrB,SACjBC,KAAKqC,aAAatC,SAClBC,KAAKsI,gBAAgBJ,GAAmB3G,SACxCvB,KAAKiI,iBAAiBC,GAAmB3G,WAI7CwF,EAec2C,kBAAP,SACL/E,EACAgF,EACAC,EAA0CC,EAG1CjB,EACAkB,EACAhB,oBAJuD,GAAEe,EAAAE,EAAA1K,EAAvD2J,cAAAA,WAAae,EAAG,EAACA,EAAAC,EAAA3K,EAAE6J,QAAAA,WAAOc,EAAG,EAACA,WAEhCpB,IAAAA,EAAuB,aACvBkB,IAAAA,EAA0CF,YAC1Cd,IAAAA,EAA+D,IAErDnE,EAAMG,OAAS,GAAzBjE,MACUqI,EAAU,GAApBrI,MACU+I,IAAsBE,GAAiBlB,EAAa9D,OAAS,GAAvEjE,MAIA,IAFA,IAAMkH,EAAY+B,EAAc/F,QAC1BkG,EAAUN,EAAW5F,QAClBsD,EAAI,EAAGA,EAAI1C,EAAMG,OAAQuC,IAAK,CACrC,IAAMrC,EAAOL,EAAM0C,GAEnB,IAAKrC,EAAKtE,OAAOD,OAAOsH,EAAUhI,WAAciF,EAAKrE,OAAOF,OAAOsH,EAAUhI,aACzEiF,EAAK/D,SAASwF,QAAQnJ,KAAS0H,EAAK9D,SAASuF,QAAQnJ,GAAzD,CAEA,IAAIuK,SACJ,IACIA,EAAY7C,EAAKrC,eAAeoF,MAClC,MAAOqB,GAEP,GAAKA,EAAcc,4BACjB,SAEF,MAAMd,EAGR,GAAIvB,EAAS9H,SAASU,OAAOwJ,GAC3BX,eACER,EACA,IAAI/B,EACF,IAAIrC,GAAOM,GAAIuE,OAAKX,GAAee,EAAYC,EAAkB7J,UACjE6J,EACAzC,YAAUa,cAEZgB,EACArC,QAEG,GAAIuC,EAAU,GAAKvE,EAAMG,OAAS,EAAG,CAC1C,IAAM0E,EAAyB7E,EAAMuB,MAAM,EAAGmB,GAAGkC,OAAO5E,EAAMuB,MAAMmB,EAAI,EAAG1C,EAAMG,SAGjFiC,EAAM2C,kBACJF,EACAG,EACAC,EACA,CACEZ,cAAAA,EACAE,QAASA,EAAU,IAEpBlE,GAAIuE,OAAKX,GACVf,EACAiB,KAKN,OAAOA,GACR/B,KC3UH,SAASoD,EAAMC,GACb,WAAYA,EAAe7I,SAAS8I,SAAS,IAG/C,IAKsBC,aAIpB,SAAAA,KA4EC,OA3EDA,EAKcC,mBAAP,SACLC,EACAC,GAEA,IAAMC,EAAUF,EAAMpJ,YAAYrB,SAAS4K,SACrCC,EAAWJ,EAAMnI,aAAatC,SAAS4K,SAEjCD,GAAWE,GAAvB/J,QACY,QAAS4J,IAAYA,EAAQI,IAAM,GAA/ChK,MAEA,IAWIiK,EACAC,EACAtF,EAbEuF,EAAaC,0BAAwBR,EAAQS,WAC7CrD,EAAmBsC,EAAMK,EAAMlC,gBAAgBmC,EAAQU,kBACvDpD,EAAoBoC,EAAMK,EAAMvC,iBAAiBwC,EAAQU,kBACzDhG,EAAiBqF,EAAM1D,MAAM3B,KAAKiG,KAAI,SAAC5K,GAAY,OAAKA,EAAMd,WAC9D2L,EACJ,QAASZ,QACCa,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAAQhB,EAAQI,KAAKR,SAAS,SACjEI,EAAQY,SAAShB,SAAS,IAE/BqB,EAAmBC,QAAQlB,EAAQmB,eAKzC,OAAQpB,EAAMvD,WACZ,KAAKE,YAAUC,YACTsD,GACFI,EAAaY,EAAmB,qDAAuD,wBAEvFX,EAAO,CAAChD,EAAW5C,EAAM6F,EAAIK,GAC7B5F,EAAQoC,GACC+C,GACTE,EAAaY,EAAmB,qDAAuD,wBAEvFX,EAAO,CAAClD,EAAUE,EAAW5C,EAAM6F,EAAIK,GACvC5F,EAlDO,QAoDPqF,EAAaY,EACT,wDACA,2BAEJX,EAAO,CAAClD,EAAUE,EAAW5C,EAAM6F,EAAIK,GACvC5F,EAzDO,OA2DT,MACF,KAAK0B,YAAUa,aACF0D,GAAX7K,MACI6J,GACFI,EAAa,wBAEbC,EAAO,CAAChD,EAAW5C,EAAM6F,EAAIK,GAC7B5F,EAAQoC,GACC+C,GACTE,EAAa,wBAEbC,EAAO,CAAChD,EAAWF,EAAU1C,EAAM6F,EAAIK,GACvC5F,EAvEO,QAyEPqF,EAAa,2BAEbC,EAAO,CAAChD,EAAWF,EAAU1C,EAAM6F,EAAIK,GACvC5F,EA5EO,OAgFb,MAAO,CACLqF,WAAAA,EACAC,KAAAA,EACAtF,MAAAA,IAEH6E"}
\ No newline at end of file
+{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { Percent, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * @deprecated use FACTORY_ADDRESS_MAP instead\n */\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const FACTORY_ADDRESS_MAP: { [chainId: number]: string } = V2_FACTORY_ADDRESSES\n\nexport const MAINNET_INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\nexport const ABSTRACT_INIT_CODE_HASH = '0x0100052734c4d75c5acbdc1a3a934476b46a054330ef6ea080b0f3241ef3f4c1'\n\n// TODO: implement dynamic function\nexport const INIT_CODE_HASH = ABSTRACT_INIT_CODE_HASH\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { BigintIsh, ChainId, computeZksyncCreate2Address, CurrencyAmount, Percent, Price, sqrt, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport {\n  _1000,\n  _997,\n  BASIS_POINTS,\n  FACTORY_ADDRESS,\n  FACTORY_ADDRESS_MAP,\n  FIVE,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ONE_HUNDRED_PERCENT,\n  ZERO,\n  ZERO_PERCENT,\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  chainId,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  chainId?: ChainId\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n  const salt = keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])])\n\n  switch (chainId) {\n    case ChainId.ZKSYNC:\n    case ChainId.ABSTRACT_TESTNET:\n      return computeZksyncCreate2Address(factoryAddress, INIT_CODE_HASH, salt)\n    default:\n      return getCreate2Address(\n        factoryAddress,\n        salt,\n        INIT_CODE_HASH\n      )\n  }\n\n  // return \n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const factoryAddress = FACTORY_ADDRESS_MAP[tokenA.chainId] ?? FACTORY_ADDRESS\n    return computePairAddress({ factoryAddress, tokenA, tokenB, chainId: tokenA?.chainId })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   * @param calculateFotFees\n   */\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        inputAmount.currency,\n        percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n      )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        outputAmount.currency,\n        outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n      )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)),\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        outputAmount.currency,\n        JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n      )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        inputAmount.currency,\n        JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n      )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType,\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS_MAP","V2_FACTORY_ADDRESSES","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","chainId","_ref2","sortsBefore","salt","keccak256","pack","address","ChainId","ZKSYNC","ABSTRACT_TESTNET","computeZksyncCreate2Address","getCreate2Address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","this","liquidityToken","Token","getAddress","_FACTORY_ADDRESS_MAP$","_proto","involvesToken","token","equals","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","wrapped","sellFeeBps","gt","BigNumber","from","buyFeeBps","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","i","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","args","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js
index b21fd24..35559a5 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js
@@ -1,4 +1,4 @@
-import { V2_FACTORY_ADDRESSES, Percent, CurrencyAmount, sqrt, Token, Price, TradeType, Fraction, computePriceImpact, sortedInsert, validateAndParseAddress } from '@uniswap/sdk-core';
+import { V2_FACTORY_ADDRESSES, Percent, ChainId, computeZksyncCreate2Address, CurrencyAmount, sqrt, Token, Price, TradeType, Fraction, computePriceImpact, sortedInsert, validateAndParseAddress } from '@uniswap/sdk-core';
 import JSBI from 'jsbi';
 import { getCreate2Address } from '@ethersproject/address';
 import { BigNumber } from '@ethersproject/bignumber';
@@ -10,7 +10,9 @@ import invariant from 'tiny-invariant';
  */
 var FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
 var FACTORY_ADDRESS_MAP = V2_FACTORY_ADDRESSES;
-var INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f';
+var ABSTRACT_INIT_CODE_HASH = '0x0100052734c4d75c5acbdc1a3a934476b46a054330ef6ea080b0f3241ef3f4c1';
+// TODO: implement dynamic function
+var INIT_CODE_HASH = ABSTRACT_INIT_CODE_HASH;
 var MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000);
 // exports for internal consumption
 var ZERO = /*#__PURE__*/JSBI.BigInt(0);
@@ -195,11 +197,20 @@ var InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {
 var computePairAddress = function computePairAddress(_ref) {
   var factoryAddress = _ref.factoryAddress,
     tokenA = _ref.tokenA,
-    tokenB = _ref.tokenB;
+    tokenB = _ref.tokenB,
+    chainId = _ref.chainId;
   var _ref2 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],
     token0 = _ref2[0],
     token1 = _ref2[1]; // does safety checks
-  return getCreate2Address(factoryAddress, keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH);
+  var salt = keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]);
+  switch (chainId) {
+    case ChainId.ZKSYNC:
+    case ChainId.ABSTRACT_TESTNET:
+      return computeZksyncCreate2Address(factoryAddress, INIT_CODE_HASH, salt);
+    default:
+      return getCreate2Address(factoryAddress, salt, INIT_CODE_HASH);
+  }
+  // return 
 };
 var Pair = /*#__PURE__*/function () {
   function Pair(currencyAmountA, tokenAmountB) {
@@ -214,7 +225,8 @@ var Pair = /*#__PURE__*/function () {
     return computePairAddress({
       factoryAddress: factoryAddress,
       tokenA: tokenA,
-      tokenB: tokenB
+      tokenB: tokenB,
+      chainId: tokenA == null ? void 0 : tokenA.chainId
     });
   }
   /**
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js.map b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js.map
index 92061a9..91d5c69 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js.map
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"v2-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { Percent, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * @deprecated use FACTORY_ADDRESS_MAP instead\n */\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const FACTORY_ADDRESS_MAP: { [chainId: number]: string } = V2_FACTORY_ADDRESSES\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { BigintIsh, CurrencyAmount, Percent, Price, sqrt, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport {\n  _1000,\n  _997,\n  BASIS_POINTS,\n  FACTORY_ADDRESS,\n  FACTORY_ADDRESS_MAP,\n  FIVE,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ONE_HUNDRED_PERCENT,\n  ZERO,\n  ZERO_PERCENT,\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const factoryAddress = FACTORY_ADDRESS_MAP[tokenA.chainId] ?? FACTORY_ADDRESS\n    return computePairAddress({ factoryAddress, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   * @param calculateFotFees\n   */\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)),\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n        )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n        )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType,\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","FACTORY_ADDRESS_MAP","V2_FACTORY_ADDRESSES","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","_ref2","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","_FACTORY_ADDRESS_MAP$","_proto","involvesToken","token","equals","priceOf","process","env","NODE_ENV","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","inputAmountBeforeTax","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","wrapped","sellFeeBps","gt","BigNumber","from","buyFeeBps","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","value","i","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"v2-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { Percent, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * @deprecated use FACTORY_ADDRESS_MAP instead\n */\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const FACTORY_ADDRESS_MAP: { [chainId: number]: string } = V2_FACTORY_ADDRESSES\n\nexport const MAINNET_INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\nexport const ABSTRACT_INIT_CODE_HASH = '0x0100052734c4d75c5acbdc1a3a934476b46a054330ef6ea080b0f3241ef3f4c1'\n\n// TODO: implement dynamic function\nexport const INIT_CODE_HASH = ABSTRACT_INIT_CODE_HASH\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { BigintIsh, ChainId, computeZksyncCreate2Address, CurrencyAmount, Percent, Price, sqrt, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport {\n  _1000,\n  _997,\n  BASIS_POINTS,\n  FACTORY_ADDRESS,\n  FACTORY_ADDRESS_MAP,\n  FIVE,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ONE_HUNDRED_PERCENT,\n  ZERO,\n  ZERO_PERCENT,\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  chainId,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  chainId?: ChainId\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n  const salt = keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])])\n\n  switch (chainId) {\n    case ChainId.ZKSYNC:\n    case ChainId.ABSTRACT_TESTNET:\n      return computeZksyncCreate2Address(factoryAddress, INIT_CODE_HASH, salt)\n    default:\n      return getCreate2Address(\n        factoryAddress,\n        salt,\n        INIT_CODE_HASH\n      )\n  }\n\n  // return \n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const factoryAddress = FACTORY_ADDRESS_MAP[tokenA.chainId] ?? FACTORY_ADDRESS\n    return computePairAddress({ factoryAddress, tokenA, tokenB, chainId: tokenA?.chainId })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   * @param calculateFotFees\n   */\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        inputAmount.currency,\n        percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n      )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        outputAmount.currency,\n        outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n      )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)),\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        outputAmount.currency,\n        JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n      )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n        inputAmount.currency,\n        JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n      )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType,\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","FACTORY_ADDRESS_MAP","V2_FACTORY_ADDRESSES","ABSTRACT_INIT_CODE_HASH","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","chainId","_ref2","sortsBefore","token0","token1","salt","keccak256","pack","address","ChainId","ZKSYNC","ABSTRACT_TESTNET","computeZksyncCreate2Address","getCreate2Address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","getAddress","_FACTORY_ADDRESS_MAP$","_proto","involvesToken","token","equals","priceOf","process","env","NODE_ENV","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","inputAmountBeforeTax","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","wrapped","sellFeeBps","gt","BigNumber","from","buyFeeBps","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","value","i","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":"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"}
\ No newline at end of file
